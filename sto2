¡Claro! Aquí tienes un ejemplo de cómo podrías implementar el uso del sessionStorage nativo de JavaScript en Angular para almacenar el campo invoiceNumber 
de la factura cuando el estado sea "pagado":

Crea un servicio para manejar el sessionStorage. Por ejemplo, puedes llamarlo SessionStorageService. Aquí está la estructura básica del servicio:

import { Injectable } from '@angular/core';

@Injectable({
  providedIn: 'root'
})
export class SessionStorageService {

  constructor() { }

  guardarInvoiceNumber(facturaId: number, invoiceNumber: string): void {
    const facturaKey = `factura-${facturaId}`;
    const facturaData = { invoiceNumber };
    sessionStorage.setItem(facturaKey, JSON.stringify(facturaData));
  }

  obtenerInvoiceNumber(facturaId: number): string {
    const facturaKey = `factura-${facturaId}`;
    const facturaDataString = sessionStorage.getItem(facturaKey);
    if (facturaDataString) {
      const facturaData = JSON.parse(facturaDataString);
      return facturaData.invoiceNumber;
    }
    return null;
  }

  eliminarInvoiceNumber(facturaId: number): void {
    const facturaKey = `factura-${facturaId}`;
    sessionStorage.removeItem(facturaKey);
  }

}
En tu componente donde se realiza la transacción de pago (por ejemplo, en un componente llamado PagoComponent), 
inyecta el servicio SessionStorageService y utiliza los métodos para guardar y eliminar el invoiceNumber en el sessionStorage. 
Aquí tienes un ejemplo:

import { Component } from '@angular/core';
import { SessionStorageService } from 'ruta-al-servicio/session-storage.service';

@Component({
  selector: 'app-pago',
  template: `
    <!-- Lógica de pago con la pasarela de pagos, como MercadoPago -->
    <button (click)="procesarPago()">Procesar Pago</button>
  `
})
export class PagoComponent {

  constructor(private sessionStorageService: SessionStorageService) { }

  procesarPago(): void {
    // Lógica para procesar el pago con la pasarela de pagos, como MercadoPago
    const facturaId = 1; // Obtener el ID de la factura
    const invoiceNumber = 'INV-123'; // Obtener el número de factura

    // Guardar el invoiceNumber en el sessionStorage
    this.sessionStorageService.guardarInvoiceNumber(facturaId, invoiceNumber);

    // Redireccionar al portal de pagos, como MercadoPago
    // ...
  }

}



En tu componente donde se verifica el estado del pago y se muestra la factura 
(por ejemplo, en un componente llamado FacturaComponent), inyecta el servicio SessionStorageService y utiliza el método para obtener el invoiceNumber del sessionStorage.
Aquí tienes un ejemplo:

import { TestBed } from '@angular/core/testing';
import { SessionStorageService } from './session-storage.service';

describe('SessionStorageService', () => {
  let service: SessionStorageService;

  beforeEach(() => {
    TestBed.configureTestingModule({});
    service = TestBed.inject(SessionStorageService);
  });

  it('should be created', () => {
    expect(service).toBeTruthy();
  });

  it('should store and retrieve invoiceNumber from sessionStorage', () => {
    const facturaId = 1;
    const invoiceNumber = 'INV-123';

    service.guardarInvoiceNumber(facturaId, invoiceNumber);
    const retrievedInvoiceNumber = service.obtenerInvoiceNumber(facturaId);

    expect(retrievedInvoiceNumber).toEqual(invoiceNumber);
  });

  // Agrega más pruebas según tus necesidades

});
